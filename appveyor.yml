version: 1.0.{build}
skip_commits:
  message: /UPDATE_DOCS/      # Regex for matching commit message
environment:
  matrix:
    - job_name: Windows MSVC build
      appveyor_build_worker_image: Visual Studio 2019

    - job_name: Linux GCC build and docs
      appveyor_build_worker_image: Ubuntu2004

#    - job_name: Linux Clang build
#      appveyor_build_worker_image: Ubuntu2004
# clang is missing <ranges> and <concepts>
for:
  - matrix:
      only:
        - job_name: Linux Clang build
    init:
      - sh: >-
          sudo apt-get update
          
          sudo apt-get install apt-transport-https ca-certificates gnupg software-properties-common wget
          
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
          
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          
          sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'
          
          sudo apt-get -y update
          
          sudo apt-get -y install libpng-dev clang-11 clang++-11 ninja-build cmake
          
          #sudo apt-get -y upgrade
          
          sudo update-alternatives --remove-all clang
          
          sudo update-alternatives --remove-all clang++
          
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-11 90
          
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-11 90
          
          sudo apt -y autoremove
          
          export CC=clang
          
          export CXX=clang++
    build_script:
      - sh: >-
          cmake -G "Ninja Multi-Config" -B build
          
          ninja -C build
    test_script:
      - sh: "cd build && ctest -C debug --verbose && cd .."

  - matrix:
      only:
        - job_name: Linux GCC build and docs
    init:
      - sh: >-
          sudo update-alternatives --remove-all gcc
          
          sudo update-alternatives --remove-all g++
          
          sudo apt-get update
          
          sudo apt-get install apt-transport-https ca-certificates gnupg software-properties-common wget
          
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
          
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          
          sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'
          
          sudo apt-get -y update
          
          sudo apt-get -y install libpng-dev gcc-11 g++-11 ninja-build cmake doxygen graphviz python3-dev python3-pip
          
          pip3 install sphinx
          
          pip3 install sphinx-inline-tabs
          
          pip3 install furo
          
          pip3 install breathe
          
          pip3 install myst_parser
          
          pip3 install linkify-it-py
          
          sudo update-alternatives --remove-all gcc
          
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 90
          
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 90
          
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30
          
          sudo update-alternatives --set cc /usr/bin/gcc
          
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30
          
          sudo update-alternatives --set c++ /usr/bin/g++
          
          #sudo apt -y autoremove
          
          export CC=gcc
          
          export CXX=g++
    #    before_build:
    #      - sh: "cd docs && rm *.* && cd .."
    build_script:
      - sh: >-
          mkdir build
          
          cmake -G "Ninja Multi-Config" -B build
          
          #-DDOCS:STRING=YES
          
          ninja -C build
    #    after_build:
    #      - sh: "cd docs && git add --all && git commit -m 'UPDATE_DOCS' && cd .." # cannot commit?
    test_script:
      - sh: "cd build && ctest -C debug --verbose && cd .."
  - matrix:
      only:
        - job_name: Windows MSVC build
    init:
      - cmd: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\VsDevCmd.bat"'
    build_script:
      - cmd: >-
          git clone https://github.com/microsoft/vcpkg

          .\\vcpkg\\bootstrap-vcpkg.bat
          
          .\\vcpkg\\vcpkg install libpng
          
          .\\vcpkg\\vcpkg install bext-ut
          
          set VCPKG_DEFAULT_TRIPLET=x64-windows
          
          .\\vcpkg\\vcpkg install libpng
          
          .\\vcpkg\\vcpkg install bext-ut
          
          cmake --version
          
          cmake --debug-output -G "CodeBlocks - NMake Makefiles" -B build -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_TOOLCHAIN_FILE=.\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake
          
          cmake --build build --target all
          
          cmake -G "Visual Studio 16 2019" -B build
          
          MSBuild build\\ALL_BUILD.vcxproj
    test_script:
      - cmd:
          cd build

          ctest -C debug --extra-verbose
          
          cd ..
    artifacts:
      - path: 'bin/*.exe'
        name: Canary
    deploy:
      - provider: GitHub
        release: Canary
        description: Automatic Test build version($(APPVEYOR_BUILD_VERSION)). [Documentation](https://sebanisu.github.io/OpenVIII_CPP_WIP/applications.html#)
        auth_token:
          secure: 5giEwDYEP975x3C+JYDNGukTupBCPcmez7GbulvUX40/2C5cgs5ta8Gyq6IYpFmW
        artifact: Canary
        prerelease: true
        force_update: true