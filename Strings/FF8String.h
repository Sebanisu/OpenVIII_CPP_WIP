//
// Created by pcvii on 6/16/2020.
//
#ifndef VIIIARCHIVE_FF8STRING_H
#define VIIIARCHIVE_FF8STRING_H
#include <string_view>
#include <array>
#include <sstream>

using namespace std::string_view_literals;
namespace OpenVIII {
struct FF8String
{
private:
  static constexpr std::array euCodePage = { "\x00"sv,
    "\x01"sv,
    "\n"sv,
    "\x03"sv,
    "\x04"sv,
    "\x05"sv,
    "\x06"sv,
    "\x07"sv,
    "\x08"sv,
    "\x09"sv,
    "\x0A"sv,
    "\x0B"sv,
    "\x0C"sv,
    "\x0D"sv,
    "\x0E"sv,
    "\x0F"sv,
    "\x10"sv,
    "\x11"sv,
    "\x12"sv,
    "\x13"sv,
    "\x14"sv,
    "\x15"sv,
    "\x16"sv,
    "\x17"sv,
    "\x18"sv,
    "\x19"sv,
    "\x1A"sv,
    "\x1B"sv,
    "\x1C"sv,
    "\x1D"sv,
    "\x1E"sv,
    "\x1F"sv,
    " "sv,
    "0"sv,
    "1"sv,
    "2"sv,
    "3"sv,
    "4"sv,
    "5"sv,
    "6"sv,
    "7"sv,
    "8"sv,
    "9"sv,
    "%"sv,
    "/"sv,
    ":"sv,
    "!"sv,
    "?"sv,
    "…"sv,
    "+"sv,
    "-"sv,
    "="sv,
    "*"sv,
    "&"sv,
    u8"\u300C"sv,
    u8"\u300D"sv,
    "("sv,
    ")"sv,
    "·"sv,
    "."sv,
    ","sv,
    "~"sv,
    "“"sv,
    "”"sv,
    "‘"sv,
    "#"sv,
    "$"sv,
    R"(")"sv,
    "_"sv,
    "A"sv,
    "B"sv,
    "C"sv,
    "D"sv,
    "E"sv,
    "F"sv,
    "G"sv,
    "H"sv,
    "I"sv,
    "J"sv,
    "K"sv,
    "L"sv,
    "M"sv,
    "N"sv,
    "O"sv,
    "P"sv,
    "Q"sv,
    "R"sv,
    "S"sv,
    "T"sv,
    "U"sv,
    "V"sv,
    "W"sv,
    "X"sv,
    "Y"sv,
    "Z"sv,
    "a"sv,
    "b"sv,
    "c"sv,
    "d"sv,
    "e"sv,
    "f"sv,
    "g"sv,
    "h"sv,
    "i"sv,
    "j"sv,
    "k"sv,
    "l"sv,
    "m"sv,
    "n"sv,
    "o"sv,
    "p"sv,
    "q"sv,
    "r"sv,
    "s"sv,
    "t"sv,
    "u"sv,
    "v"sv,
    "w"sv,
    "x"sv,
    "y"sv,
    "z"sv,
    "À"sv,
    "Á"sv,
    "Â"sv,
    "Ä"sv,
    "Ç"sv,
    "È"sv,
    "É"sv,
    "Ê"sv,
    "Ë"sv,
    "Ì"sv,
    "Í"sv,
    "Î"sv,
    "Ï"sv,
    "Ñ"sv,
    "Ò"sv,
    "Ó"sv,
    "Ô"sv,
    "Ö"sv,
    "Ù"sv,
    "Ú"sv,
    "Û"sv,
    "Ü"sv,
    "Œ"sv,
    "ß"sv,
    "à"sv,
    "á"sv,
    "â"sv,
    "ä"sv,
    "ç"sv,
    "è"sv,
    "é"sv,
    "ê"sv,
    "ë"sv,
    "ì"sv,
    "í"sv,
    "î"sv,
    "ï"sv,
    "ñ"sv,
    "ò"sv,
    "ó"sv,
    "ô"sv,
    "ö"sv,
    "ù"sv,
    "ú"sv,
    "û"sv,
    "ü"sv,
    "œ"sv,
    u8"\u2167"sv,
    "["sv,
    "]"sv,
    u8"\u25A0"sv,
    u8"\u25CE"sv,
    u8"\u2666"sv,
    u8"\u3016"sv,
    u8"\u3017"sv,
    u8"\u25A1"sv,
    u8"\u2605"sv,
    u8"\u300E"sv,
    u8"\u300F"sv,
    u8"\u25BD"sv,
    ";"sv,
    u8"\u25BC"sv,
    u8"\u203E"sv,
    u8"\u2A2F"sv,
    u8"\u2606"sv,
    u8"\u02CA"sv,
    u8"\u2193"sv,
    "°"sv,
    "¡"sv,
    "¿"sv,
    u8"\u2500"sv,
    "«"sv,
    "»"sv,
    "±"sv,
    u8"\u266C"sv,
    "\xC4"sv,
    u8"\u2191"sv,
    "V"sv,
    "III"sv,
    "¡"sv,
    u8"\u2122"sv,
    "<"sv,
    ">"sv,
    "GA"sv,
    "ME"sv,
    "FOL"sv,
    "D"sv,
    "ER"sv,
    "Sl"sv,
    "ot"sv,
    "lng"sv,
    "St"sv,
    "ec"sv,
    "kp"sv,
    "la1"sv,
    ":z"sv,
    "Fe"sv,
    "nte"sv,
    "lng"sv,
    "lre"sv,
    ":S:"sv,
    "S0"sv,
    "Ra"sv,
    "nu"sv,
    "ra"sv,
    u8"\u00AE"sv,
    "\xE3"sv,
    "\xE4"sv,
    "\xE5"sv,
    "\xE6"sv,
    "\xE7"sv,
    "in"sv,
    "e "sv,
    "ne"sv,
    "to"sv,
    "re"sv,
    "HP"sv,
    "l "sv,
    "ll"sv,
    "GF"sv,
    "nt"sv,
    "il"sv,
    "o "sv,
    "ef"sv,
    "on"sv,
    " w"sv,
    " r"sv,
    "wi"sv,
    "fi"sv,
    "\xFA"sv,
    "s "sv,
    "ar"sv,
    u8"\u2C77"sv,
    " S"sv,
    "ag"sv };

public:
  static constexpr auto &GetCodePage() { return euCodePage; }
  [[nodiscard]] auto static Decode(uint8_t key) noexcept
  {
    using namespace std::literals;
    return GetCodePage().at(key);
  }
  [[nodiscard]] auto static Decode(const std::string_view &buffer)
  {
    if (std::empty(buffer)) {
      return std::string{};
    }
    //    std::transform_reduce(buffer.begin(),buffer.end(),r,[](const auto &key)
    //    {return Decode(static_cast<uint8_t>(key));},[](auto a, auto b)){});
    std::stringstream ss{};
    for (auto key : buffer) {
      const auto value = Decode(static_cast<uint8_t>(key));
      ss << value;
    }
    return ss.str();
  }
};
}// namespace OpenVIII
#endif// VIIIARCHIVE_FF8STRING_H
