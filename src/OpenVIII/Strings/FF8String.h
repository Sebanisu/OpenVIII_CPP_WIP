// This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
#ifndef VIIIARCHIVE_FF8STRING_H
#define VIIIARCHIVE_FF8STRING_H
#include <string_view>
#include <array>
#include <sstream>
#include "LangT.h"

using namespace std::string_view_literals;
namespace OpenVIII {
template<LangT langVal> struct FF8String
{
private:
  static constexpr std::array euCodePage = { "\x00"sv,
    "\x01"sv,
    "\n"sv,
    "\x03"sv,
    "\x04"sv,
    "\x05"sv,
    "\x06"sv,
    "\x07"sv,
    "\x08"sv,
    "\x09"sv,
    "\x0A"sv,
    "\x0B"sv,
    "\x0C"sv,
    "\x0D"sv,
    "\x0E"sv,
    "\x0F"sv,
    "\x10"sv,
    "\x11"sv,
    "\x12"sv,
    "\x13"sv,
    "\x14"sv,
    "\x15"sv,
    "\x16"sv,
    "\x17"sv,
    "\x18"sv,
    "\x19"sv,
    "\x1A"sv,
    "\x1B"sv,
    "\x1C"sv,
    "\x1D"sv,
    "\x1E"sv,
    "\x1F"sv,
    " "sv,
    "0"sv,
    "1"sv,
    "2"sv,
    "3"sv,
    "4"sv,
    "5"sv,
    "6"sv,
    "7"sv,
    "8"sv,
    "9"sv,
    "%"sv,
    "/"sv,
    ":"sv,
    "!"sv,
    "?"sv,
    "…"sv,
    "+"sv,
    "-"sv,
    "="sv,
    "*"sv,
    "&"sv,
    u8"\u300C"sv,
    u8"\u300D"sv,
    "("sv,
    ")"sv,
    "·"sv,
    "."sv,
    ","sv,
    "~"sv,
    "“"sv,
    "”"sv,
    "‘"sv,
    "#"sv,
    "$"sv,
    R"(")"sv,
    "_"sv,
    "A"sv,
    "B"sv,
    "C"sv,
    "D"sv,
    "E"sv,
    "F"sv,
    "G"sv,
    "H"sv,
    "I"sv,
    "J"sv,
    "K"sv,
    "L"sv,
    "M"sv,
    "N"sv,
    "O"sv,
    "P"sv,
    "Q"sv,
    "R"sv,
    "S"sv,
    "T"sv,
    "U"sv,
    "V"sv,
    "W"sv,
    "X"sv,
    "Y"sv,
    "Z"sv,
    "a"sv,
    "b"sv,
    "c"sv,
    "d"sv,
    "e"sv,
    "f"sv,
    "g"sv,
    "h"sv,
    "i"sv,
    "j"sv,
    "k"sv,
    "l"sv,
    "m"sv,
    "n"sv,
    "o"sv,
    "p"sv,
    "q"sv,
    "r"sv,
    "s"sv,
    "t"sv,
    "u"sv,
    "v"sv,
    "w"sv,
    "x"sv,
    "y"sv,
    "z"sv,
    "À"sv,
    "Á"sv,
    "Â"sv,
    "Ä"sv,
    "Ç"sv,
    "È"sv,
    "É"sv,
    "Ê"sv,
    "Ë"sv,
    "Ì"sv,
    "Í"sv,
    "Î"sv,
    "Ï"sv,
    "Ñ"sv,
    "Ò"sv,
    "Ó"sv,
    "Ô"sv,
    "Ö"sv,
    "Ù"sv,
    "Ú"sv,
    "Û"sv,
    "Ü"sv,
    "Œ"sv,
    "ß"sv,
    "à"sv,
    "á"sv,
    "â"sv,
    "ä"sv,
    "ç"sv,
    "è"sv,
    "é"sv,
    "ê"sv,
    "ë"sv,
    "ì"sv,
    "í"sv,
    "î"sv,
    "ï"sv,
    "ñ"sv,
    "ò"sv,
    "ó"sv,
    "ô"sv,
    "ö"sv,
    "ù"sv,
    "ú"sv,
    "û"sv,
    "ü"sv,
    "œ"sv,
    u8"\u2167"sv,
    "["sv,
    "]"sv,
    u8"\u25A0"sv,
    u8"\u25CE"sv,
    u8"\u2666"sv,
    u8"\u3016"sv,
    u8"\u3017"sv,
    u8"\u25A1"sv,
    u8"\u2605"sv,
    u8"\u300E"sv,
    u8"\u300F"sv,
    u8"\u25BD"sv,
    ";"sv,
    u8"\u25BC"sv,
    u8"\u203E"sv,
    u8"\u2A2F"sv,
    u8"\u2606"sv,
    u8"\u02CA"sv,
    u8"\u2193"sv,
    "°"sv,
    "¡"sv,
    "¿"sv,
    u8"\u2500"sv,
    "«"sv,
    "»"sv,
    "±"sv,
    u8"\u266C"sv,
    "\xC4"sv,
    u8"\u2191"sv,
    "V"sv,
    "III"sv,
    "¡"sv,
    u8"\u2122"sv,
    "<"sv,
    ">"sv,
    "GA"sv,
    "ME"sv,
    "FOL"sv,
    "D"sv,
    "ER"sv,
    "Sl"sv,
    "ot"sv,
    "lng"sv,
    "St"sv,
    "ec"sv,
    "kp"sv,
    "la1"sv,
    ":z"sv,
    "Fe"sv,
    "nte"sv,
    "lng"sv,
    "lre"sv,
    ":S:"sv,
    "S0"sv,
    "Ra"sv,
    "nu"sv,
    "ra"sv,
    u8"\u00AE"sv,
    "\xE3"sv,
    "\xE4"sv,
    "\xE5"sv,
    "\xE6"sv,
    "\xE7"sv,
    "in"sv,
    "e "sv,
    "ne"sv,
    "to"sv,
    "re"sv,
    "HP"sv,
    "l "sv,
    "ll"sv,
    "GF"sv,
    "nt"sv,
    "il"sv,
    "o "sv,
    "ef"sv,
    "on"sv,
    " w"sv,
    " r"sv,
    "wi"sv,
    "fi"sv,
    "\xFA"sv,
    "s "sv,
    "ar"sv,
    u8"\u2C77"sv,
    " S"sv,
    "ag"sv };

  static constexpr std::array jpCodePage = { "\x00"sv,
    "\x01"sv,
    "\n"sv,
    "\x03"sv,
    "\x04"sv,
    "\x05"sv,
    "\x06"sv,
    "\x07"sv,
    "\x08"sv,
    "\x09"sv,
    "\x0A"sv,
    "\x0B"sv,
    "\x0C"sv,
    "\x0D"sv,
    "\x0E"sv,
    "\x0F"sv,
    "\x10"sv,
    "\x11"sv,
    "\x12"sv,
    "\x13"sv,
    "\x14"sv,
    "\x15"sv,
    "\x16"sv,
    "\x17"sv,
    "\x18"sv,
    "\x19"sv,
    "\x1A"sv,
    "\x1B"sv,
    "\x1C"sv,
    "\x1D"sv,
    "\x1E"sv,
    "\x1F"sv,
    u8"バ"sv,
    u8"ば"sv,
    u8"ビ"sv,
    u8"び"sv,
    u8"ブ"sv,
    u8"ぶ"sv,
    u8"ベ"sv,
    u8"べ"sv,
    u8"ボ"sv,
    u8"ぼ"sv,
    u8"ガ"sv,
    u8"が"sv,
    u8"ギ"sv,
    u8"ぎ"sv,
    u8"グ"sv,
    u8"ぐ"sv,
    u8"ゲ"sv,
    u8"げ"sv,
    u8"ゴ"sv,
    u8"ご"sv,
    u8"ザ"sv,
    u8"ざ"sv,
    u8"ジ"sv,
    u8"じ"sv,
    u8"ズ"sv,
    u8"ず"sv,
    u8"ゼ"sv,
    u8"ぜ"sv,
    u8"ゾ"sv,
    u8"ぞ"sv,
    u8"ダ"sv,
    u8"だ"sv,
    u8"ヂ"sv,
    u8"ぢ"sv,
    u8"ヅ"sv,
    u8"づ"sv,
    u8"デ"sv,
    u8"で"sv,
    u8"ド"sv,
    u8"ど"sv,
    u8"ヴ"sv,
    u8"パ"sv,
    u8"ぱ"sv,
    u8"ピ"sv,
    u8"ぴ"sv,
    u8"プ"sv,
    u8"ぷ"sv,
    u8"ペ"sv,
    u8"ぺ"sv,
    u8"ポ"sv,
    u8"ぽ"sv,
    u8"０"sv,
    u8"１"sv,
    u8"２"sv,
    u8"３"sv,
    u8"４"sv,
    u8"５"sv,
    u8"６"sv,
    u8"７"sv,
    u8"８"sv,
    u8"９"sv,
    u8"、"sv,
    u8"。"sv,
    u8"　"sv,
    u8"ハ"sv,
    u8"は"sv,
    u8"ヒ"sv,
    u8"ひ"sv,
    u8"フ"sv,
    u8"ふ"sv,
    u8"ヘ"sv,
    u8"へ"sv,
    u8"ホ"sv,
    u8"ほ"sv,
    u8"カ"sv,
    u8"か"sv,
    u8"キ"sv,
    u8"き"sv,
    u8"ク"sv,
    u8"く"sv,
    u8"ケ"sv,
    u8"け"sv,
    u8"コ"sv,
    u8"こ"sv,
    u8"サ"sv,
    u8"さ"sv,
    u8"シ"sv,
    u8"し"sv,
    u8"ス"sv,
    u8"す"sv,
    u8"セ"sv,
    u8"せ"sv,
    u8"ソ"sv,
    u8"そ"sv,
    u8"タ"sv,
    u8"た"sv,
    u8"チ"sv,
    u8"ち"sv,
    u8"ツ"sv,
    u8"つ"sv,
    u8"テ"sv,
    u8"て"sv,
    u8"ト"sv,
    u8"と"sv,
    u8"ウ"sv,
    u8"う"sv,
    u8"ア"sv,
    u8"あ"sv,
    u8"イ"sv,
    u8"い"sv,
    u8"エ"sv,
    u8"え"sv,
    u8"オ"sv,
    u8"お"sv,
    u8"ナ"sv,
    u8"な"sv,
    u8"ニ"sv,
    u8"に"sv,
    u8"ヌ"sv,
    u8"ぬ"sv,
    u8"ネ"sv,
    u8"ね"sv,
    u8"ノ"sv,
    u8"の"sv,
    u8"マ"sv,
    u8"ま"sv,
    u8"ミ"sv,
    u8"み"sv,
    u8"ム"sv,
    u8"む"sv,
    u8"メ"sv,
    u8"め"sv,
    u8"モ"sv,
    u8"も"sv,
    u8"ラ"sv,
    u8"ら"sv,
    u8"リ"sv,
    u8"り"sv,
    u8"ル"sv,
    u8"る"sv,
    u8"レ"sv,
    u8"れ"sv,
    u8"ロ"sv,
    u8"ろ"sv,
    u8"ヤ"sv,
    u8"や"sv,
    u8"ユ"sv,
    u8"ゆ"sv,
    u8"ヨ"sv,
    u8"よ"sv,
    u8"ワ"sv,
    u8"わ"sv,
    u8"ン"sv,
    u8"ん"sv,
    u8"ヲ"sv,
    u8"を"sv,
    u8"ッ"sv,
    u8"っ"sv,
    u8"ャ"sv,
    u8"ゃ"sv,
    u8"ュ"sv,
    u8"ゅ"sv,
    u8"ョ"sv,
    u8"ょ"sv,
    u8"ァ"sv,
    u8"ぁ"sv,
    u8"ィ"sv,
    u8"ぃ"sv,
    u8"ゥ"sv,
    u8"ぅ"sv,
    u8"ェ"sv,
    u8"ぇ"sv,
    u8"ォ"sv,
    u8"ぉ"sv,
    u8"Ａ"sv,
    u8"Ｂ"sv,
    u8"Ｃ"sv,
    u8"Ｄ"sv,
    u8"Ｅ"sv,
    u8"Ｆ"sv,
    u8"Ｇ"sv,
    u8"Ｈ"sv,
    u8"Ｉ"sv,
    u8"Ｊ"sv,
    u8"Ｋ"sv,
    u8"Ｌ"sv,
    u8"Ｍ"sv,
    u8"Ｎ"sv,
    u8"Ｏ"sv,
    u8"Ｐ"sv,
    u8"Ｑ"sv,
    u8"Ｒ"sv,
    u8"Ｓ"sv,
    u8"Ｔ"sv,
    u8"Ｕ"sv,
    u8"Ｖ"sv,
    u8"Ｗ"sv,
    u8"Ｘ"sv,
    u8"Ｙ"sv,
    u8"Ｚ"sv,
    u8"！"sv,
    u8"？"sv,
    u8"…"sv,
    u8"＋"sv,
    u8"－"sv,
    u8"＝"sv,
    u8"＊"sv,
    u8"／"sv,
    u8"％"sv,
    u8"＆"sv,
    u8"「"sv,
    u8"」"sv,
    u8"（"sv,
    u8"）"sv,
    u8"収"sv,
    u8"容"sv,
    u8"所"sv,
    u8"駅"sv,
    u8"・"sv,
    u8"．"sv,
    u8"，"sv,
    u8"："sv,
    u8"～"sv,
    u8"ー"sv };

public:
  // static constexpr std::array LangCodes = { "en"sv, "fr"sv, "es"sv, "it"sv, "de"sv, "jp"sv };

  static constexpr auto &GetCodePage()
  {
    if constexpr (langVal == LangT::JP) {
      return jpCodePage;
    } else {
      return euCodePage;
    }
  }
  [[nodiscard]] auto static Decode(uint8_t key) noexcept { return GetCodePage().at(key); }
  [[nodiscard]] auto static Decode(const std::string_view &buffer)
  {
    if (std::empty(buffer)) {
      return std::string{};
    }
    //    std::transform_reduce(buffer.begin(),buffer.end(),r,[](const auto &key)
    //    {return Decode(static_cast<uint8_t>(key));},[](auto a, auto b)){});
    std::stringstream ss{};
    for (auto key : buffer) {
      const auto value = Decode(static_cast<uint8_t>(key));
      ss << value;
    }
    return ss.str();
  }
};
}// namespace OpenVIII
#endif// VIIIARCHIVE_FF8STRING_H
